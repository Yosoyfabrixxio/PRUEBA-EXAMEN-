<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Método Simplex con Gráfica</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: Arial, sans-serif; padding: 20px; background-color: #f9f9f9; }
    input, textarea, button { width: 100%; padding: 10px; margin: 10px 0; }
    canvas { max-width: 600px; margin-top: 20px; }
    #resultado { background: #fff; padding: 10px; border: 1px solid #ccc; }
  </style>
</head>
<body>

  <h2>🔢 Método Simplex (con Gráfica)</h2>

  <label>Función Objetivo (Maximizar Z = ax + by):</label>
  <input id="objetivo" placeholder="Ej: 60 80">

  <label>Restricciones (una por línea, formato: a b <= c):</label>
  <textarea id="restricciones" rows="6" placeholder="Ej:
4 2 <= 100
2 3 <= 120
x >= 0
y >= 0"></textarea>

  <button onclick="resolver()">Resolver y Graficar</button>

  <h3>Resultado:</h3>
  <div id="resultado"></div>

  <canvas id="grafica" width="600" height="400"></canvas>

  <script>
    let grafico = null;

    function resolver() {
      const obj = document.getElementById("objetivo").value.trim().split(/\s+/).map(Number);
      const restr = document.getElementById("restricciones").value.trim().split("\n");

      let A = [], b = [];

      for (let r of restr) {
        let partes = r.split(/(<=|>=|=)/);
        let coefs = partes[0].trim().split(/\s+/).map(Number);
        let tipo = partes[1];
        let rhs = Number(partes[2]);
        A.push({ coefs, tipo, rhs });
      }

      let soluciones = [];

      for (let i = 0; i < A.length; i++) {
        for (let j = i + 1; j < A.length; j++) {
          const inter = interseccion(A[i], A[j]);
          if (inter && esFactible(inter, A)) {
            const z = obj[0] * inter[0] + obj[1] * inter[1];
            soluciones.push({ punto: inter, z });
          }
        }
      }

      if (soluciones.length === 0) {
        document.getElementById("resultado").textContent = "No hay región factible.";
        return;
      }

      soluciones.sort((a, b) => b.z - a.z);
      const optimo = soluciones[0];

      document.getElementById("resultado").innerHTML = `
        Z Máxima: <b>${optimo.z.toFixed(2)}</b><br>
        x = <b>${optimo.punto[0].toFixed(2)}</b>, y = <b>${optimo.punto[1].toFixed(2)}</b>
      `;

      graficar(A, soluciones.map(s => s.punto), optimo.punto);
    }

    function interseccion(r1, r2) {
      const [a1, b1] = r1.coefs;
      const [a2, b2] = r2.coefs;
      const c1 = r1.rhs;
      const c2 = r2.rhs;

      const det = a1 * b2 - a2 * b1;
      if (det === 0) return null;

      const x = (c1 * b2 - c2 * b1) / det;
      const y = (a1 * c2 - a2 * c1) / det;

      return [x, y];
    }

    function esFactible(punto, restricciones) {
      const [x, y] = punto;
      for (let r of restricciones) {
        const val = r.coefs[0] * x + r.coefs[1] * y;
        if (r.tipo === "<=" && val > r.rhs + 0.01) return false;
        if (r.tipo === ">=" && val < r.rhs - 0.01) return false;
        if (r.tipo === "=" && Math.abs(val - r.rhs) > 0.01) return false;
      }
      return x >= 0 && y >= 0;
    }

    function graficar(restricciones, puntos, optimo) {
      const datasets = restricciones.map((r, i) => {
        const x = [0, 100];
        const y = x.map(val => {
          const a = r.coefs[0], b = r.coefs[1];
          if (b === 0) return NaN;
          return (r.rhs - a * val) / b;
        });

        return {
          label: `Restricción ${i + 1}`,
          data: x.map((xi, idx) => ({ x: xi, y: y[idx] })),
          borderColor: 'rgba(0, 0, 255, 0.4)',
          fill: false,
          tension: 0
        };
      });

      datasets.push({
        label: 'Región Factible',
        data: puntos.map(p => ({ x: p[0], y: p[1] })),
        backgroundColor: 'rgba(0,255,0,0.3)',
        type: 'scatter',
        pointRadius: 4
      });

      datasets.push({
        label: 'Óptimo',
        data: [{ x: optimo[0], y: optimo[1] }],
        backgroundColor: 'red',
        type: 'scatter',
        pointRadius: 6
      });

      if (grafico) grafico.destroy();

      const ctx = document.getElementById("grafica").getContext("2d");
      grafico = new Chart(ctx, {
        type: 'line',
        data: {
          datasets: datasets
        },
        options: {
          responsive: true,
          scales: {
            x: { beginAtZero: true },
            y: { beginAtZero: true }
          }
        }
      });
    }
  </script>

</body>
</html>
